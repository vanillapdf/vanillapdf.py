name: Build and Publish

on:
  workflow_dispatch:
    inputs:
      publish_target:
        description: "Select target pypi environment"
        required: true
        default: "testpypi"
        type: choice
        options:
          - testpypi
          - pypi

permissions:
  contents: read  # Download the repository source code

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64

          - os: windows-latest
            arch: AMD64

          - os: macos-13  # Intel
            arch: x86_64

          # arm64 is fundamentally broken right now, so let's drop it
          # Apple Silicon should be still able to run x64 via Rosetta
          #- os: macos-latest  # Apple Silicon
          #  arch: arm64

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Windows: Caching vcpkg_installed and downloads (optional: bincache only if custom override is used)
      - name: Cache vcpkg artifacts (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: actions/cache@v4
        with:
          path: |
            build/vcpkg_installed
            external/vcpkg/downloads
          key: vcpkg-windows-${{ matrix.arch }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-windows-${{ matrix.arch }}-
            vcpkg-windows-

      # macOS: Default vcpkg binary cache
      - name: Cache vcpkg binary cache (macOS)
        if: ${{ runner.os == 'macOS' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/Library/Caches/vcpkg
          key: vcpkg-macos-${{ matrix.arch }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-macos-${{ matrix.arch }}-
            vcpkg-macos-

      # Linux: Default vcpkg binary cache
      - name: Cache vcpkg binary cache (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.cache/vcpkg
          key: vcpkg-linux-${{ matrix.arch }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-linux-${{ matrix.arch }}-
            vcpkg-linux-

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_BUILD_VERBOSITY: 1
          CIBW_SKIP: "cp*-musllinux_*"
          CIBW_ARCHS_WINDOWS: "${{ matrix.arch }}"
          CIBW_ARCHS_MACOS: "${{ matrix.arch }}"
          CIBW_ARCHS_LINUX: "${{ matrix.arch }}"
          CIBW_ENVIRONMENT: 'VCPKG_ROOT=external/vcpkg'
          CIBW_ENVIRONMENT_MACOS: 'MACOSX_DEPLOYMENT_TARGET=11.0'
          CIBW_BEFORE_BUILD_WINDOWS: |
            call external\vcpkg\bootstrap-vcpkg.bat
          CIBW_BEFORE_BUILD_MACOS: |
            external/vcpkg/bootstrap-vcpkg.sh
          CIBW_BEFORE_BUILD_LINUX: |
            external/vcpkg/bootstrap-vcpkg.sh
          CIBW_BEFORE_ALL_MACOS: |
            brew install ninja
          CIBW_BEFORE_ALL_LINUX: |
            yum install -y zip unzip gcc gcc-c++ make tar curl perl perl-IPC-Cmd ninja-build

      - name: Upload built wheels
        uses: actions/upload-artifact@v4
        with:
          name: vanillapdf-wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: dist

  publish:
    name: Publish to Python Package Index
    needs: build-wheels
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.publish_target }}
      url: ${{ vars.PYPI_PROJECT_URL }}

    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: vanillapdf-wheels-*
          merge-multiple: true

      - name: Publish to ${{ github.event.inputs.publish_target }} (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ vars.PYPI_REPOSITORY_URL }}
          print-hash: true
